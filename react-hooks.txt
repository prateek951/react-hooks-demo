Understanding React Hooks by Maximilian Schwarzmuller 

What are React Hooks ? 

It is a new feature that was added in React 16.8 
Allows you to create every component as a functional component. 

They have nothing to do with the React Lifecycle hooks 

With React hooks sharing (stateful) logic between components 
becomes easier 

From class to () => 

class components                    Functional Components 

state + setState(...)               useState(...) allows you to manage state in your component 

It is recommended and the best approach to have as many presentational components as possible 
and only some of the container components that have state in them that can interact with Redux for 
example 

React 16.8 ships with main React Hooks and all these naming of the hooks 
start with use and then followed by the name of the hook 

like useState,usePersist etc 

import { useState } from 'react';

const [state,setState] = useState('some default state or value')

Now its the crux 
how to add react-hooks in a component that has lifecycle hooks 
and where we want to convert it into a functional component. 

For making async calls we need to make use of the useEffect() react hook 
to cause side effects since async calls are also side effects and therefore 
we need to use the useEffect() for our calls to take place 
Things like HTTP requests that happen in your components and it works 
a bit different than the componentDidMount and I will show you what 
is the difference 

useEffect is triggered after the component has been rendered to the 
DOM just like the componentDidMount had for class based components 

useEffect runs more often compared to componentDidMount and you can 
control it 

useEffect with second argument added as an empty array is equivalent 
to componentDidMount since the empty array will never change and hence 
the state will not get changed due to this and component will not 
re-render and thus useEffect will only get triggered once. 

useEffect with an empty array is just like componentDidMount 
Default was that useEffect ran for every update of the component 

SYNTAX 

useEffect(() => {},[])

This can be used for both componentDidMount 
or even componentDidUpdate which re-renders the component 
when the props or the state of the component changes 

We can also make use of useEffect for the cleanup task that we want 
to do like what we use to do in componentWillUnmount() 

When you destroy the component also then the callback function will fire 
for cleanup task in the useEffect 

useEffect(() => {
    fetchData();
    return () => { 
        console.log('I WILL DO THE CLEANUP work just like componentWillUnmount used to do');
    }
},[props.selectedChar])


componentDidMount for class based components 

In functional components this is handled using useEffect({},[]);

componentDidUpdate for class based components 

In functional components this is handled using useEffect({},[props.selectedChar])
This will also work for componentDidMount the very first time and then when the props change 
it will fire useState for every subsequent change and fetch data 

How to implement shouldComponentDidUpdate in functional components ?  

RULES FOR Hooks

You should always call hooks at the top level of the function 
and not at the middle or bottom of the function 
It should not be nested inside another function call 
Not nested inside an if statement at all

Lastly : You do not have to switch ! React Hooks work alongside 
class based components and class based components are not removed from 
React 
